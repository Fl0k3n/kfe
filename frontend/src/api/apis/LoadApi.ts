/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FileMetadataDTO,
} from '../models/index';
import {
    FileMetadataDTOFromJSON,
    FileMetadataDTOToJSON,
} from '../models/index';

/**
 * 
 */
export class LoadApi extends runtime.BaseAPI {

    /**
     * Get Directory Files
     */
    async getDirectoryFilesLoadGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FileMetadataDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/load/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FileMetadataDTOFromJSON));
    }

    /**
     * Get Directory Files
     */
    async getDirectoryFilesLoadGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FileMetadataDTO>> {
        const response = await this.getDirectoryFilesLoadGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Load Sample Files
     */
    async loadSampleFilesLoadFilesTestingGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/load/files-testing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Load Sample Files
     */
    async loadSampleFilesLoadFilesTestingGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loadSampleFilesLoadFilesTestingGetRaw(initOverrides);
        return await response.value();
    }

}
