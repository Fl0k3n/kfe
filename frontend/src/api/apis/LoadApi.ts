/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FileMetadataDTO,
  FindSimilarItemsRequest,
  HTTPValidationError,
  SearchRequest,
  SearchResultDTO,
} from '../models/index';
import {
    FileMetadataDTOFromJSON,
    FileMetadataDTOToJSON,
    FindSimilarItemsRequestFromJSON,
    FindSimilarItemsRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    SearchRequestFromJSON,
    SearchRequestToJSON,
    SearchResultDTOFromJSON,
    SearchResultDTOToJSON,
} from '../models/index';

export interface FindSimilarItemsLoadFindSimilarPostRequest {
    findSimilarItemsRequest: FindSimilarItemsRequest;
}

export interface SearchLoadSearchPostRequest {
    searchRequest: SearchRequest;
}

/**
 * 
 */
export class LoadApi extends runtime.BaseAPI {

    /**
     * Find Similar Items
     */
    async findSimilarItemsLoadFindSimilarPostRaw(requestParameters: FindSimilarItemsLoadFindSimilarPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SearchResultDTO>>> {
        if (requestParameters['findSimilarItemsRequest'] == null) {
            throw new runtime.RequiredError(
                'findSimilarItemsRequest',
                'Required parameter "findSimilarItemsRequest" was null or undefined when calling findSimilarItemsLoadFindSimilarPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/load/find-similar`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FindSimilarItemsRequestToJSON(requestParameters['findSimilarItemsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SearchResultDTOFromJSON));
    }

    /**
     * Find Similar Items
     */
    async findSimilarItemsLoadFindSimilarPost(requestParameters: FindSimilarItemsLoadFindSimilarPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SearchResultDTO>> {
        const response = await this.findSimilarItemsLoadFindSimilarPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Directory Files
     */
    async getDirectoryFilesLoadGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FileMetadataDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/load/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FileMetadataDTOFromJSON));
    }

    /**
     * Get Directory Files
     */
    async getDirectoryFilesLoadGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FileMetadataDTO>> {
        const response = await this.getDirectoryFilesLoadGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Search
     */
    async searchLoadSearchPostRaw(requestParameters: SearchLoadSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SearchResultDTO>>> {
        if (requestParameters['searchRequest'] == null) {
            throw new runtime.RequiredError(
                'searchRequest',
                'Required parameter "searchRequest" was null or undefined when calling searchLoadSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/load/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRequestToJSON(requestParameters['searchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SearchResultDTOFromJSON));
    }

    /**
     * Search
     */
    async searchLoadSearchPost(requestParameters: SearchLoadSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SearchResultDTO>> {
        const response = await this.searchLoadSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
