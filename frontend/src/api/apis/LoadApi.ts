/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FindSimilarImagesToUploadedImageRequest,
  FindSimilarItemsRequest,
  GetOffsetOfFileInLoadResultsRequest,
  GetOffsetOfFileInLoadResultsResponse,
  HTTPValidationError,
  LoadAllFilesResponse,
  SearchRequest,
  SearchResponse,
  SearchResultDTO,
} from '../models/index';
import {
    FindSimilarImagesToUploadedImageRequestFromJSON,
    FindSimilarImagesToUploadedImageRequestToJSON,
    FindSimilarItemsRequestFromJSON,
    FindSimilarItemsRequestToJSON,
    GetOffsetOfFileInLoadResultsRequestFromJSON,
    GetOffsetOfFileInLoadResultsRequestToJSON,
    GetOffsetOfFileInLoadResultsResponseFromJSON,
    GetOffsetOfFileInLoadResultsResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LoadAllFilesResponseFromJSON,
    LoadAllFilesResponseToJSON,
    SearchRequestFromJSON,
    SearchRequestToJSON,
    SearchResponseFromJSON,
    SearchResponseToJSON,
    SearchResultDTOFromJSON,
    SearchResultDTOToJSON,
} from '../models/index';

export interface FindItemsWithSimilarDescriptionsLoadFindWithSimilarDescriptionPostRequest {
    xDirectory: string;
    findSimilarItemsRequest: FindSimilarItemsRequest;
}

export interface FindItemsWithSimilarLlmTextLoadFindWithSimilarLlmTextPostRequest {
    xDirectory: string;
    findSimilarItemsRequest: FindSimilarItemsRequest;
}

export interface FindItemsWithSimilarMetadataLoadFindWithSimilarMetadataPostRequest {
    xDirectory: string;
    findSimilarItemsRequest: FindSimilarItemsRequest;
}

export interface FindVisuallySimilarImagesLoadFindVisuallySimilarImagesPostRequest {
    xDirectory: string;
    findSimilarItemsRequest: FindSimilarItemsRequest;
}

export interface FindVisuallySimilarImagesToUploadedImageLoadFindSimilarToUploadedImagePostRequest {
    xDirectory: string;
    findSimilarImagesToUploadedImageRequest: FindSimilarImagesToUploadedImageRequest;
}

export interface FindVisuallySimilarVideosLoadFindVisuallySimilarVideosPostRequest {
    xDirectory: string;
    findSimilarItemsRequest: FindSimilarItemsRequest;
}

export interface GetDirectoryFilesLoadGetRequest {
    xDirectory: string;
    offset?: number;
    limit?: number;
}

export interface GetFileOffsetInLoadResultsLoadGetOffsetInLoadResultsPostRequest {
    xDirectory: string;
    getOffsetOfFileInLoadResultsRequest: GetOffsetOfFileInLoadResultsRequest;
}

export interface SearchLoadSearchPostRequest {
    xDirectory: string;
    searchRequest: SearchRequest;
    offset?: number;
    limit?: number;
}

/**
 * 
 */
export class LoadApi extends runtime.BaseAPI {

    /**
     * Find Items With Similar Descriptions
     */
    async findItemsWithSimilarDescriptionsLoadFindWithSimilarDescriptionPostRaw(requestParameters: FindItemsWithSimilarDescriptionsLoadFindWithSimilarDescriptionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SearchResultDTO>>> {
        if (requestParameters['xDirectory'] == null) {
            throw new runtime.RequiredError(
                'xDirectory',
                'Required parameter "xDirectory" was null or undefined when calling findItemsWithSimilarDescriptionsLoadFindWithSimilarDescriptionPost().'
            );
        }

        if (requestParameters['findSimilarItemsRequest'] == null) {
            throw new runtime.RequiredError(
                'findSimilarItemsRequest',
                'Required parameter "findSimilarItemsRequest" was null or undefined when calling findItemsWithSimilarDescriptionsLoadFindWithSimilarDescriptionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xDirectory'] != null) {
            headerParameters['x-directory'] = String(requestParameters['xDirectory']);
        }

        const response = await this.request({
            path: `/load/find-with-similar-description`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FindSimilarItemsRequestToJSON(requestParameters['findSimilarItemsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SearchResultDTOFromJSON));
    }

    /**
     * Find Items With Similar Descriptions
     */
    async findItemsWithSimilarDescriptionsLoadFindWithSimilarDescriptionPost(requestParameters: FindItemsWithSimilarDescriptionsLoadFindWithSimilarDescriptionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SearchResultDTO>> {
        const response = await this.findItemsWithSimilarDescriptionsLoadFindWithSimilarDescriptionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find Items With Similar Llm Text
     */
    async findItemsWithSimilarLlmTextLoadFindWithSimilarLlmTextPostRaw(requestParameters: FindItemsWithSimilarLlmTextLoadFindWithSimilarLlmTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SearchResultDTO>>> {
        if (requestParameters['xDirectory'] == null) {
            throw new runtime.RequiredError(
                'xDirectory',
                'Required parameter "xDirectory" was null or undefined when calling findItemsWithSimilarLlmTextLoadFindWithSimilarLlmTextPost().'
            );
        }

        if (requestParameters['findSimilarItemsRequest'] == null) {
            throw new runtime.RequiredError(
                'findSimilarItemsRequest',
                'Required parameter "findSimilarItemsRequest" was null or undefined when calling findItemsWithSimilarLlmTextLoadFindWithSimilarLlmTextPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xDirectory'] != null) {
            headerParameters['x-directory'] = String(requestParameters['xDirectory']);
        }

        const response = await this.request({
            path: `/load/find-with-similar-llm-text`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FindSimilarItemsRequestToJSON(requestParameters['findSimilarItemsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SearchResultDTOFromJSON));
    }

    /**
     * Find Items With Similar Llm Text
     */
    async findItemsWithSimilarLlmTextLoadFindWithSimilarLlmTextPost(requestParameters: FindItemsWithSimilarLlmTextLoadFindWithSimilarLlmTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SearchResultDTO>> {
        const response = await this.findItemsWithSimilarLlmTextLoadFindWithSimilarLlmTextPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find Items With Similar Metadata
     */
    async findItemsWithSimilarMetadataLoadFindWithSimilarMetadataPostRaw(requestParameters: FindItemsWithSimilarMetadataLoadFindWithSimilarMetadataPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SearchResultDTO>>> {
        if (requestParameters['xDirectory'] == null) {
            throw new runtime.RequiredError(
                'xDirectory',
                'Required parameter "xDirectory" was null or undefined when calling findItemsWithSimilarMetadataLoadFindWithSimilarMetadataPost().'
            );
        }

        if (requestParameters['findSimilarItemsRequest'] == null) {
            throw new runtime.RequiredError(
                'findSimilarItemsRequest',
                'Required parameter "findSimilarItemsRequest" was null or undefined when calling findItemsWithSimilarMetadataLoadFindWithSimilarMetadataPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xDirectory'] != null) {
            headerParameters['x-directory'] = String(requestParameters['xDirectory']);
        }

        const response = await this.request({
            path: `/load/find-with-similar-metadata`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FindSimilarItemsRequestToJSON(requestParameters['findSimilarItemsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SearchResultDTOFromJSON));
    }

    /**
     * Find Items With Similar Metadata
     */
    async findItemsWithSimilarMetadataLoadFindWithSimilarMetadataPost(requestParameters: FindItemsWithSimilarMetadataLoadFindWithSimilarMetadataPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SearchResultDTO>> {
        const response = await this.findItemsWithSimilarMetadataLoadFindWithSimilarMetadataPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find Visually Similar Images
     */
    async findVisuallySimilarImagesLoadFindVisuallySimilarImagesPostRaw(requestParameters: FindVisuallySimilarImagesLoadFindVisuallySimilarImagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SearchResultDTO>>> {
        if (requestParameters['xDirectory'] == null) {
            throw new runtime.RequiredError(
                'xDirectory',
                'Required parameter "xDirectory" was null or undefined when calling findVisuallySimilarImagesLoadFindVisuallySimilarImagesPost().'
            );
        }

        if (requestParameters['findSimilarItemsRequest'] == null) {
            throw new runtime.RequiredError(
                'findSimilarItemsRequest',
                'Required parameter "findSimilarItemsRequest" was null or undefined when calling findVisuallySimilarImagesLoadFindVisuallySimilarImagesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xDirectory'] != null) {
            headerParameters['x-directory'] = String(requestParameters['xDirectory']);
        }

        const response = await this.request({
            path: `/load/find-visually-similar-images`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FindSimilarItemsRequestToJSON(requestParameters['findSimilarItemsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SearchResultDTOFromJSON));
    }

    /**
     * Find Visually Similar Images
     */
    async findVisuallySimilarImagesLoadFindVisuallySimilarImagesPost(requestParameters: FindVisuallySimilarImagesLoadFindVisuallySimilarImagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SearchResultDTO>> {
        const response = await this.findVisuallySimilarImagesLoadFindVisuallySimilarImagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find Visually Similar Images To Uploaded Image
     */
    async findVisuallySimilarImagesToUploadedImageLoadFindSimilarToUploadedImagePostRaw(requestParameters: FindVisuallySimilarImagesToUploadedImageLoadFindSimilarToUploadedImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SearchResultDTO>>> {
        if (requestParameters['xDirectory'] == null) {
            throw new runtime.RequiredError(
                'xDirectory',
                'Required parameter "xDirectory" was null or undefined when calling findVisuallySimilarImagesToUploadedImageLoadFindSimilarToUploadedImagePost().'
            );
        }

        if (requestParameters['findSimilarImagesToUploadedImageRequest'] == null) {
            throw new runtime.RequiredError(
                'findSimilarImagesToUploadedImageRequest',
                'Required parameter "findSimilarImagesToUploadedImageRequest" was null or undefined when calling findVisuallySimilarImagesToUploadedImageLoadFindSimilarToUploadedImagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xDirectory'] != null) {
            headerParameters['x-directory'] = String(requestParameters['xDirectory']);
        }

        const response = await this.request({
            path: `/load/find-similar-to-uploaded-image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FindSimilarImagesToUploadedImageRequestToJSON(requestParameters['findSimilarImagesToUploadedImageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SearchResultDTOFromJSON));
    }

    /**
     * Find Visually Similar Images To Uploaded Image
     */
    async findVisuallySimilarImagesToUploadedImageLoadFindSimilarToUploadedImagePost(requestParameters: FindVisuallySimilarImagesToUploadedImageLoadFindSimilarToUploadedImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SearchResultDTO>> {
        const response = await this.findVisuallySimilarImagesToUploadedImageLoadFindSimilarToUploadedImagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find Visually Similar Videos
     */
    async findVisuallySimilarVideosLoadFindVisuallySimilarVideosPostRaw(requestParameters: FindVisuallySimilarVideosLoadFindVisuallySimilarVideosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SearchResultDTO>>> {
        if (requestParameters['xDirectory'] == null) {
            throw new runtime.RequiredError(
                'xDirectory',
                'Required parameter "xDirectory" was null or undefined when calling findVisuallySimilarVideosLoadFindVisuallySimilarVideosPost().'
            );
        }

        if (requestParameters['findSimilarItemsRequest'] == null) {
            throw new runtime.RequiredError(
                'findSimilarItemsRequest',
                'Required parameter "findSimilarItemsRequest" was null or undefined when calling findVisuallySimilarVideosLoadFindVisuallySimilarVideosPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xDirectory'] != null) {
            headerParameters['x-directory'] = String(requestParameters['xDirectory']);
        }

        const response = await this.request({
            path: `/load/find-visually-similar-videos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FindSimilarItemsRequestToJSON(requestParameters['findSimilarItemsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SearchResultDTOFromJSON));
    }

    /**
     * Find Visually Similar Videos
     */
    async findVisuallySimilarVideosLoadFindVisuallySimilarVideosPost(requestParameters: FindVisuallySimilarVideosLoadFindVisuallySimilarVideosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SearchResultDTO>> {
        const response = await this.findVisuallySimilarVideosLoadFindVisuallySimilarVideosPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Directory Files
     */
    async getDirectoryFilesLoadGetRaw(requestParameters: GetDirectoryFilesLoadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoadAllFilesResponse>> {
        if (requestParameters['xDirectory'] == null) {
            throw new runtime.RequiredError(
                'xDirectory',
                'Required parameter "xDirectory" was null or undefined when calling getDirectoryFilesLoadGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xDirectory'] != null) {
            headerParameters['x-directory'] = String(requestParameters['xDirectory']);
        }

        const response = await this.request({
            path: `/load/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoadAllFilesResponseFromJSON(jsonValue));
    }

    /**
     * Get Directory Files
     */
    async getDirectoryFilesLoadGet(requestParameters: GetDirectoryFilesLoadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoadAllFilesResponse> {
        const response = await this.getDirectoryFilesLoadGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get File Offset In Load Results
     */
    async getFileOffsetInLoadResultsLoadGetOffsetInLoadResultsPostRaw(requestParameters: GetFileOffsetInLoadResultsLoadGetOffsetInLoadResultsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOffsetOfFileInLoadResultsResponse>> {
        if (requestParameters['xDirectory'] == null) {
            throw new runtime.RequiredError(
                'xDirectory',
                'Required parameter "xDirectory" was null or undefined when calling getFileOffsetInLoadResultsLoadGetOffsetInLoadResultsPost().'
            );
        }

        if (requestParameters['getOffsetOfFileInLoadResultsRequest'] == null) {
            throw new runtime.RequiredError(
                'getOffsetOfFileInLoadResultsRequest',
                'Required parameter "getOffsetOfFileInLoadResultsRequest" was null or undefined when calling getFileOffsetInLoadResultsLoadGetOffsetInLoadResultsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xDirectory'] != null) {
            headerParameters['x-directory'] = String(requestParameters['xDirectory']);
        }

        const response = await this.request({
            path: `/load/get-offset-in-load-results`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetOffsetOfFileInLoadResultsRequestToJSON(requestParameters['getOffsetOfFileInLoadResultsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOffsetOfFileInLoadResultsResponseFromJSON(jsonValue));
    }

    /**
     * Get File Offset In Load Results
     */
    async getFileOffsetInLoadResultsLoadGetOffsetInLoadResultsPost(requestParameters: GetFileOffsetInLoadResultsLoadGetOffsetInLoadResultsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOffsetOfFileInLoadResultsResponse> {
        const response = await this.getFileOffsetInLoadResultsLoadGetOffsetInLoadResultsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search
     */
    async searchLoadSearchPostRaw(requestParameters: SearchLoadSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>> {
        if (requestParameters['xDirectory'] == null) {
            throw new runtime.RequiredError(
                'xDirectory',
                'Required parameter "xDirectory" was null or undefined when calling searchLoadSearchPost().'
            );
        }

        if (requestParameters['searchRequest'] == null) {
            throw new runtime.RequiredError(
                'searchRequest',
                'Required parameter "searchRequest" was null or undefined when calling searchLoadSearchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xDirectory'] != null) {
            headerParameters['x-directory'] = String(requestParameters['xDirectory']);
        }

        const response = await this.request({
            path: `/load/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRequestToJSON(requestParameters['searchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResponseFromJSON(jsonValue));
    }

    /**
     * Search
     */
    async searchLoadSearchPost(requestParameters: SearchLoadSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse> {
        const response = await this.searchLoadSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
