/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  OpenFileRequest,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    OpenFileRequestFromJSON,
    OpenFileRequestToJSON,
} from '../models/index';

export interface OpenFileAccessOpenPostRequest {
    xDirectory: string;
    openFileRequest: OpenFileRequest;
}

export interface OpenNativeExplorerAccessOpenDirectoryPostRequest {
    xDirectory: string;
}

/**
 * 
 */
export class AccessApi extends runtime.BaseAPI {

    /**
     * Open File
     */
    async openFileAccessOpenPostRaw(requestParameters: OpenFileAccessOpenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['xDirectory'] == null) {
            throw new runtime.RequiredError(
                'xDirectory',
                'Required parameter "xDirectory" was null or undefined when calling openFileAccessOpenPost().'
            );
        }

        if (requestParameters['openFileRequest'] == null) {
            throw new runtime.RequiredError(
                'openFileRequest',
                'Required parameter "openFileRequest" was null or undefined when calling openFileAccessOpenPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xDirectory'] != null) {
            headerParameters['x-directory'] = String(requestParameters['xDirectory']);
        }

        const response = await this.request({
            path: `/access/open`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenFileRequestToJSON(requestParameters['openFileRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Open File
     */
    async openFileAccessOpenPost(requestParameters: OpenFileAccessOpenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.openFileAccessOpenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Open Native Explorer
     */
    async openNativeExplorerAccessOpenDirectoryPostRaw(requestParameters: OpenNativeExplorerAccessOpenDirectoryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['xDirectory'] == null) {
            throw new runtime.RequiredError(
                'xDirectory',
                'Required parameter "xDirectory" was null or undefined when calling openNativeExplorerAccessOpenDirectoryPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xDirectory'] != null) {
            headerParameters['x-directory'] = String(requestParameters['xDirectory']);
        }

        const response = await this.request({
            path: `/access/open-directory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Open Native Explorer
     */
    async openNativeExplorerAccessOpenDirectoryPost(requestParameters: OpenNativeExplorerAccessOpenDirectoryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.openNativeExplorerAccessOpenDirectoryPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
